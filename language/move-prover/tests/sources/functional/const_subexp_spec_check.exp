Move prover returns: exiting with boogie verification errors
error: subexpression is constant: Value(NodeId(17), Bool(true)).

    ┌── tests/sources/functional/const_subexp_spec_check.move:17:9 ───
    │
 17 │         requires true;
    │         ^^^^^^^^^^^^^^
    │

error: subexpression is constant: Value(NodeId(18), Bool(true)).

    ┌── tests/sources/functional/const_subexp_spec_check.move:18:9 ───
    │
 18 │         requires true ==> x < 5;
    │         ^^^^^^^^^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(21), Lt, [LocalVar(NodeId(19), Symbol(47)), Value(NodeId(20), Number(BigInt { sign: Plus, data: BigUint { data: [5] } }))]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:18:9 ───
    │
 18 │         requires true ==> x < 5;
    │         ^^^^^^^^^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(22), Implies, [Value(NodeId(18), Bool(true)), Call(NodeId(21), Lt, [LocalVar(NodeId(19), Symbol(47)), Value(NodeId(20), Number(BigInt { sign: Plus, data: BigUint { data: [5] } }))])]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:18:9 ───
    │
 18 │         requires true ==> x < 5;
    │         ^^^^^^^^^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(79), Not, [Call(NodeId(29), And, [Call(NodeId(25), Lt, [LocalVar(NodeId(23), Symbol(47)), Value(NodeId(24), Number(BigInt { sign: Plus, data: BigUint { data: [5] } }))]), Call(NodeId(28), Gt, [LocalVar(NodeId(26), Symbol(47)), Value(NodeId(27), Number(BigInt { sign: Plus, data: BigUint { data: [5] } }))])])]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:26:9 ───
    │
 26 │         ensures (x < 5 && x > 5) ==> x < 5;
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(87), Not, [Call(NodeId(52), Lt, [Call(NodeId(50), Result(0), []), Value(NodeId(51), Number(BigInt { sign: NoSign, data: BigUint { data: [] } }))])]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:37:9 ───
    │
 37 │         ensures x < 3 ==> result < 0;
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(90), Not, [Call(NodeId(62), Neq, [LocalVar(NodeId(60), Symbol(47)), Value(NodeId(61), Number(BigInt { sign: Plus, data: BigUint { data: [4] } }))])]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:48:9 ───
    │
 48 │         requires x != 4;    // assume false
    │         ^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(65), Eq, [LocalVar(NodeId(63), Symbol(47)), Value(NodeId(64), Number(BigInt { sign: Plus, data: BigUint { data: [4] } }))]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:49:9 ───
    │
 49 │         requires x == 4;    // asserts true
    │         ^^^^^^^^^^^^^^^^
    │

error: subexpression is constant: Call(NodeId(91), Not, [Call(NodeId(65), Eq, [LocalVar(NodeId(63), Symbol(47)), Value(NodeId(64), Number(BigInt { sign: Plus, data: BigUint { data: [4] } }))])]).

    ┌── tests/sources/functional/const_subexp_spec_check.move:49:9 ───
    │
 49 │         requires x == 4;    // asserts true
    │         ^^^^^^^^^^^^^^^^
    │
